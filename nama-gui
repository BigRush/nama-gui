
#!/usr/bin/env bash


################################################################################
# Author :	BigRush && chn555
#
# License :  GPLv3
#
# Description :  NAM (Network Automated Manager).
#				 This script will use nmcli to set up static ip efortlessly.
#
# Version :  1.0.0
################################################################################
NAM_Version="1.0.0"

OPTS=$(getopt -o hV --long help,version,runasroot -n 'parse-options' -- "$@")
if [ $? != 0 ] ; then
	echo "Invalid arguments" >&2
	echo "Use -h for help"
	exit 1 ;
fi
eval set -- "$OPTS"

Help_ARG=0
Version_ARG=0
Runasroot_ARG=0


while true; do
	case "$1" in
		-h|--help) Help_ARG=1; shift ;;
		-V|--version ) Version_ARG=1; shift ;;
		--runasroot ) Runasroot_ARG=1; shift ;;
		-- ) shift; break ;;
		-* | --*) Help_ARG=1; shift;;
		* ) break ;;
	esac
done


## Checks if the script runs as root
Root_Check () {
	if [[ $Runasroot_ARG -eq 1 ]]; then
		return 0
	elif  [[ $EUID -eq 0 ]]; then
		printf "$line\n"
		printf "This option must not run with root privileges\n"
		printf "$line\n"
		exit 1
	fi
}

## Declare functionâ€™s variables, create and validate log files
Log_And_Variables () {

	####  Varibale	####
	line=$(printf '%40s\n' | tr ' ' -)
  	logpath=/tmp/nama.log
	####  Varibale	####



	## Check if log file exits, if not, create it
	if ! [[ -e $logpath ]]; then
		touch $logpath
	fi
}

## Check if zenity is installed and if not install it.
Zenity_Check () {

	## Check if zenity exists
	if [[ -z $(command -v zenity) ]]; then
		read -p "zenity is a dependency to run nama-gui,\nWould you like to install it?[Y/n]: " answer
		until [[ -z $answer ]] || [[ $answer == "[Y|y]" ]] || \
		[[ $answer == "[N|n]" ]]; do
			echo $line
			echo "Invalid answer, try again..."
			read -p "nama is a dependency to run nama-gui,\nWould you like to install it?[Y/n]: " answer
		done

		if [[ -z $answer ]] || [[ $answer == "[Y|y]" ]]; then
			## Check if the system has pacman package manager
			if [[ -z $(command -v pacman) ]]; then
				echo $line
				## Download zenity
				pacman -S zenity --noconfirm &>> $logpath

				## Validate zenity download
				if [[ $? -eq 0 ]]; then
					echo $line
					echo "Zenity downloaded successfully"
				else
					echo $line
					echo "Something went wrong while downloading zenity."
					echo "Please check the log under $logpath"
				fi

			elif [[ -z $(command -v apt-get) ]]; then
				echo $line
				apt-get install zenity -y &>> $logpath

				if [[ $? -eq 0 ]]; then
					echo $line
					echo "Zenity downloaded successfully"
				else
					echo $line
					echo "Something went wrong while downloading zenity."
					echo "Please check the log under $logpath"
				fi

			elif [[ -z $(command -v dnf) ]]; then
				echo $line
				dnf install zenity -y &>> $logpath

				if [[ $? -eq 0 ]]; then
					echo $line
					echo "Zenity downloaded successfully"
				else
					echo $line
					echo "Something went wrong while downloading zenity."
					echo "Please check the log under $logpath"
				fi

			else
				echo $line
				echo "Could not detect your system's package manager"
				echo "Please install zenity manually"
			fi

	elif [[ $answer == "[N|n]" ]]; then
		echo $line
		echo "Exiting - We hope you feel safe now"
		exit 0

	else
		echo $line
		echo "Something went wrong somehow..."
		echo "Exiting..."
		exit 1
	fi

	fi
}

## Check if nama is installed and if not ask the user if he wants to install it.
nama_check () {

	if [[ -z $(command -v nama) ]]; then
		read -p "nama is a dependency to run nama-gui,\nWould you like to install it?[Y/n]: " answer
		until [[ -z $answer ]] || [[ $answer == "[Y|y]" ]] || \
		[[ $answer == "[N|n]" ]]; do
			echo $line
			echo "Invalid answer, try again..."
			read -p "nama is a dependency to run nama-gui,\nWould you like to install it?[Y/n]: " answer
		done

		if [[ -z $answer ]] || [[ $answer == "[Y|y]" ]]; then
			echo $line
			echo "Didn't detect nama, cloning nama from github"
			git clone https://github.com/chn555/nama &>> $logpath
			if [[ $? -eq 0 ]]; then
				cd nama
				echo $line
				echo "Compiling the package..."
				sudo echo
				sudo make install &>> $logpath
				if [[ $? -eq 0 ]]; then
					zenity --info --title="Network Automated MAnager" --text="nama installed successfully!" --width=250
					echo "nama installed successfully!"
				else
					zenity --error --title="Network Automated MAnager" \
					--text="Somthing went wrong while compiling the package.\nPlease check the log file under $logpath" --width 350
					exit 1
				fi
			else
				zenity --error --title="Network Automated MAnager" \
				--text="Somthing went wrong while cloning nama from git.\nPlease check the log file under $logpath" --width 350
				exit 1
			fi

		elif [[ $answer == "[N|n]" ]]; then
			zenity --info --title="Network Automated MAnager" --text="Exiting - We hope you feel safe now" --width 250
			exit 0
		else
			zenity --error --title="Network Automated MAnager" --text="Something went wrong somehow.\nExiting." --width 250
			exit 1
		fi
	fi
}

## Filter active network interfaces, ignoring any interfaces that are not
## ethernet or wireless
Filter_Active_Interfaces () {
  echo "Looking for active interfaces..."
  echo ""
  ## Unset Active_Interfaces array in case the array already exist
  unset Active_Interfaces
  sleep 1
  readarray -t Active_Interfaces <<< "$(nmcli -t -f NAME,UUID,TYPE,DEVICE con show --active)"
  for i in ${Active_Interfaces[@]}; do
      ## Filter out the real connections
      i=$(echo $i | egrep 'wireless|ethernet')
      ## Filter out the actual interface name
      i=$(echo $i | cut -d ":" -f 4)
      ## Add the names into the new array
      Filtered_Active_Interfaces+=($i)
  done
}

## If more than one exists prompt the user, if only one exists chose that one
## and notify the user, if no interfaces exist exit the program
Network_Active_Interfaces () {
	if [[ ${#Filtered_Active_Interfaces[@]} -eq 0 ]]; then
        zenity --error --title="Network Automated MAnager" --text="No interface is found, exiting" --width=200
            exit 1
    elif [[ ${#Filtered_Active_Interfaces[@]} -eq 1 ]]; then
        zenity --info --title="Network Automated MAnager" \
		--text="Only ${Filtered_Active_Interfaces[0]} is connected, and will be used" --width=240
        Interface=${Filtered_Active_Interfaces[0]}

    else
		Interface=$(zenity --list --title="Network Automated MAnager" --text="Network Configuration" \
		--column="Interface"	 \
		"${Filtered_Active_Interfaces[@]}")
    fi
}

## Ask for network configuration from the user with zenity
Network_Variables () {
	NetworkConfig=($(zenity --forms --title="Network Automated MAnager" --text="Network Configuration" \
	--separator=" " \
	--add-entry="IP Address                                                " \
	--add-entry="Netmask" \
	--add-entry="Gateway" \
	--add-entry="DNS1" \
	--add-entry="DNS2" \
	--add-entry="Profile name"))
	if [[ $? -eq 1 ]]; then
		exit 0
	fi

	IPv4="${NetworkConfig[0]}"
	Netmask="${NetworkConfig[1]}"
	Gateway="${NetworkConfig[2]}"
	DNS1="${NetworkConfig[3]}"
	DNS2="${NetworkConfig[4]}"
	ProfileName="${NetworkConfig[5]}"
}

## Checks if the input from the user conforms to ipv4 format
Network_Variable_Verify () {
	oct='([1-9]?[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])'
  	ip4="^$oct\\.$oct\\.$oct\\.$oct$"

	until [[ ${#NetworkConfig[@]} -eq 6 ]]; do
		zenity --error --title="Network Automated MAnager" \
	   --text="Empty cells are not allowed.\nPlease fill all cells." --width 250
	   Network_Variables
   done

	until [[ $IPv4 =~ $ip4 ]]; do
		zenity --error --title="Network Automated MAnager" \
		--text="Invalid IPv4.\nPlease insert a valid IPv4 address" --width 250
		Network_Variables
	done

	until [[ $Netmask -ge 1 ]] && [[ $Netmask -le 32 ]]; do
		zenity --error --title="Network Automated MAnager" \
		--text="Invalid netmask.\nPlease insert a valid netmask in bit format" --width 250
		Network_Variables
	done

	until [[ $Gateway =~ $ip4 ]]; do
		zenity --error --title="Network Automated MAnager" \
		--text="Invalid gateway.\nPlease insert a valid gateway address" --width 250
		Network_Variables
	done

	until [[ $DNS1 =~ $ip4 ]]; do
		zenity --error --title="Network Automated MAnager" \
		--text="Invalid primary DNS.\nPlease insert a valid primary DNS address" --width 250
		Network_Variables
	done

	until [[ $IPv4 =~ $ip4 ]]; do
		zenity --error --title="Network Automated MAnager" \
		--text="Invalid secondary DNS.\nPlease insert a valid secondary DNS address" --width 250
		Network_Variables
	done

	until ! [[ -z $ProfileName ]]; do
		zenity --error --title="Network Automated MAnager" \
		--text="Please enter a profile name" --width 250
		Network_Variables
	done
}

## Configure network settings with nmcli
Network_Configuration () {
	if ! [[ -z $(nmcli con show $ProfileName) ]] &>> $logpath; then
			zenity --question --title="Network Automated MAnager" --text="Profile name already exits, overwrite?" --width=250
			if [[ $? -eq 0 ]]; then
				nama -i $Interface -p $ProfileName --ipv4 $IPv4 --netmask $NetworkConfig --gateway $Gateway --dns1 $DNS1 --dns2 $DNS2 -f &>> $logpath
				if [[ $? -eq 0 ]]; then
					zenity --info --title="Network Automated MAnager" --text="Network configuration completed successfully" --width=350
					exit 0
				else
					zenity --error --title="Network Automated MAnager" \
					--text="Somthing went wrong while configuring the network settings.\nPlease check the log file under $logpath" --width=350
					exit 1
				fi
			else
				zenity --info --title="Network Automated MAnager" --text="Exiting - We hope you feel safe now" --width 250\
				exit 0
			fi
	else
		nama -i $Interface -p $ProfileName --ipv4 $IPv4 --netmask $NetworkConfig --gateway $Gateway --dns1 $DNS1 --dns2 $DNS2 &>> $logpath
		if [[ $? -eq 0 ]]; then
			zenity --info --title="Network Automated MAnager" --text="Network configuration completed successfully" --width=350
			exit 0
		else
			zenity --error --title="Network Automated MAnager" \
			--text="Somthing went wrong while configuring the network settings.\nPlease check the log file under $logpath" --width=350
			exit 1
		fi
	fi
}

## Display help to the user
Help_Function () {
printf "%s" "\
Usage: nama --option \"value\" --option \"value\"
nama (Network Automated Manager)
This script will use nmcli to set up static ip efortlessly.

Options:

    -f                          if profile name is used, force overwrite

    -i <Active interface>       active interface to be used

    -p <Profile name>           name of the profile to be created

    --ipv4 <ipv4 address>       valid ipv4 address to be used

    --netmask <netmask>         netmask to be used, in bit-length format

    --gateway <gateway>         gateway address to be used

    --dns1 <dns address>        primary name server address to be used

    --dns2 <dns address>        secondary name server address to be used

    --runasroot                 Enable the option to run the script as root


Example:

	sudo nama -i enp0s3 -p test --ipv4 192.168.1.1 --netmask 24 --gateway 192.168.1.10 --dns1 1.1.1.1 --dns2 9.9.9.9 --runasroot

Authors:

	chn555
		https://github.com/chn555

	BigRush
		https://github.com/BigRush



For any bugs please report to https://github.com/chn555/nama/issues

"
}

## Call other functionss
Main () {
	if [[ $Version_ARG -ne 0 ]]; then
		echo "NAM version $NAM_Version"
	fi
	## Verify that no argument is being used, and use the standard version
	if [[ $Help_ARG -eq 0 ]] && [[ $Version_ARG -eq 0 ]]; then
		Root_Check
		Log_And_Variables
		Zenity_Check
		Filter_Active_Interfaces
		Network_Active_Interfaces
		Network_Variables
		Network_Variable_Verify
		Network_Configuration

	## check if only the Help flag is on
	elif [[ $Help_ARG -ne 0 ]] ; then
		Help_Function
		exit 0

	else
		echo "Missing arguments, use -h for help"
		exit 1
	fi
}

Main
